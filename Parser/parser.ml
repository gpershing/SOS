type token =
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | POW
  | SEQ
  | NOT
  | EQ
  | LT
  | GT
  | LTEQ
  | GTEQ
  | EQEQ
  | NEQ
  | AND
  | OR
  | DOT
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | IF
  | THEN
  | ELSE
  | STRUCT
  | ALIAS
  | INTLIT of (int)
  | FLOATLIT of (float)
  | VAR of (string)
  | VARCOLON of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
 open Ast 
# 43 "parser.ml"
let yytransl_const = [|
  257 (* ADD *);
  258 (* SUB *);
  259 (* MUL *);
  260 (* DIV *);
  261 (* MOD *);
  262 (* POW *);
  263 (* SEQ *);
  264 (* NOT *);
  265 (* EQ *);
  266 (* LT *);
  267 (* GT *);
  268 (* LTEQ *);
  269 (* GTEQ *);
  270 (* EQEQ *);
  271 (* NEQ *);
  272 (* AND *);
  273 (* OR *);
  274 (* DOT *);
  275 (* COMMA *);
  276 (* LPAREN *);
  277 (* RPAREN *);
  278 (* LBRACE *);
  279 (* RBRACE *);
  280 (* LBRACK *);
  281 (* RBRACK *);
  282 (* IF *);
  283 (* THEN *);
  284 (* ELSE *);
  285 (* STRUCT *);
  286 (* ALIAS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  287 (* INTLIT *);
  288 (* FLOATLIT *);
  289 (* VAR *);
  290 (* VARCOLON *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\005\000\005\000\003\000\003\000\007\000\007\000\006\000\006\000\
\008\000\008\000\004\000\004\000\009\000\009\000\010\000\010\000\
\011\000\011\000\012\000\012\000\001\000\000\000"

let yylen = "\002\000\
\005\000\006\000\003\000\004\000\007\000\001\000\001\000\001\000\
\003\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\003\000\003\000\004\000\006\000\
\004\000\001\000\000\000\001\000\002\000\004\000\000\000\001\000\
\002\000\004\000\000\000\001\000\001\000\003\000\004\000\006\000\
\001\000\001\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\007\000\000\000\054\000\000\000\049\000\
\051\000\000\000\011\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\052\000\027\000\029\000\000\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\031\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\048\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\022\000\094\000\023\000\063\000\107\000\095\000\108\000\
\024\000\016\000\017\000\018\000"

let yysindex = "\003\000\
\091\255\000\000\108\255\108\255\108\255\108\255\108\255\108\255\
\232\254\241\254\000\000\000\000\255\254\000\000\030\003\000\000\
\000\000\238\002\000\000\000\000\224\255\030\003\010\255\003\255\
\254\254\169\255\027\255\043\255\108\255\021\255\051\255\108\255\
\108\255\249\254\108\255\108\255\108\255\108\255\108\255\108\255\
\108\255\108\255\108\255\108\255\108\255\108\255\108\255\108\255\
\108\255\000\000\000\000\000\000\000\000\108\255\000\000\108\255\
\033\255\024\255\047\003\052\255\108\255\000\000\044\255\046\255\
\199\255\108\255\037\255\075\255\075\255\066\255\066\255\066\255\
\066\255\047\003\158\255\158\255\158\255\158\255\079\003\079\003\
\064\003\064\003\030\003\141\255\037\255\000\000\108\255\043\002\
\000\000\000\000\065\255\047\003\053\255\055\255\068\255\108\255\
\248\254\047\003\054\255\108\255\000\000\081\255\058\255\047\003\
\000\000\108\255\000\000\073\255\047\003\108\255\061\255\030\003\
\062\255\047\003\000\000\108\255\030\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\072\255\076\255\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\253\002\000\000\
\000\000\000\000\000\000\000\000\000\000\007\255\000\000\247\254\
\000\000\000\000\000\000\000\000\000\000\000\000\082\255\072\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\002\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\255\199\000\232\000\067\000\100\000\133\000\
\166\000\044\002\010\001\043\001\073\001\106\001\139\001\172\001\
\202\001\235\001\041\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\002\000\000\000\000\084\255\000\000\
\000\000\107\002\085\255\000\000\000\000\000\000\000\000\140\002\
\000\000\000\000\000\000\086\255\173\002\000\000\000\000\000\255\
\000\000\206\002\000\000\000\000\008\255"

let yygindex = "\000\000\
\000\000\002\000\000\000\249\255\000\000\000\000\012\000\000\000\
\000\000\000\000\091\000\000\000"

let yytablesize = 1116
let yytable = "\025\000\
\008\000\066\000\015\000\001\000\019\000\020\000\021\000\029\000\
\027\000\026\000\103\000\044\000\067\000\044\000\105\000\044\000\
\030\000\028\000\041\000\015\000\041\000\054\000\055\000\062\000\
\064\000\045\000\042\000\045\000\042\000\045\000\059\000\045\000\
\053\000\009\000\065\000\057\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\058\000\003\000\060\000\085\000\083\000\
\086\000\084\000\004\000\046\000\087\000\046\000\088\000\046\000\
\089\000\046\000\014\000\092\000\090\000\093\000\005\000\040\000\
\006\000\100\000\007\000\102\000\008\000\037\000\038\000\039\000\
\040\000\011\000\012\000\013\000\061\000\101\000\103\000\106\000\
\098\000\110\000\111\000\113\000\003\000\115\000\043\000\116\000\
\097\000\104\000\004\000\015\000\043\000\109\000\043\000\035\000\
\036\000\039\000\040\000\112\000\051\000\003\000\005\000\114\000\
\006\000\000\000\007\000\004\000\008\000\117\000\000\000\009\000\
\010\000\011\000\012\000\013\000\000\000\000\000\000\000\005\000\
\000\000\006\000\000\000\007\000\016\000\008\000\000\000\000\000\
\000\000\000\000\011\000\012\000\013\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\035\000\036\000\
\037\000\038\000\039\000\040\000\000\000\017\000\000\000\000\000\
\096\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\000\000\000\000\012\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\013\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\020\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\021\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\014\000\014\000\014\000\014\000\014\000\
\022\000\014\000\014\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\015\000\015\000\015\000\015\000\
\015\000\023\000\015\000\015\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\016\000\016\000\016\000\
\016\000\016\000\018\000\016\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
\017\000\017\000\017\000\019\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\012\000\
\012\000\024\000\000\000\000\000\000\000\012\000\012\000\000\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\013\000\013\000\025\000\000\000\000\000\000\000\013\000\013\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\026\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\004\000\000\000\000\000\022\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\001\000\000\000\000\000\000\000\000\000\000\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\032\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\000\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\002\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\005\000\000\000\000\000\
\024\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\024\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\000\000\050\000\000\000\000\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\025\000\050\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
\003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\026\000\026\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\000\000\099\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\003\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\006\000\050\000\007\000\000\000\008\000\
\000\000\000\000\009\000\010\000\011\000\012\000\013\000\000\000\
\050\000\000\000\050\000\000\000\050\000\000\000\050\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\035\000\036\000\037\000\038\000\039\000\040\000\000\000\000\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\042\000\043\000\044\000\045\000"

let yycheck = "\007\000\
\000\000\009\001\001\000\001\000\003\000\004\000\005\000\009\001\
\033\001\008\000\019\001\021\001\020\001\023\001\023\001\025\001\
\018\001\033\001\019\001\018\000\021\001\019\001\025\001\031\000\
\032\000\019\001\019\001\021\001\021\001\023\001\029\000\025\001\
\023\001\000\000\033\000\009\001\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\009\001\002\001\033\001\022\001\054\000\
\033\001\056\000\008\001\019\001\009\001\021\001\061\000\023\001\
\021\001\025\001\000\000\066\000\023\001\033\001\020\001\006\001\
\022\001\009\001\024\001\021\001\026\001\003\001\004\001\005\001\
\006\001\031\001\032\001\033\001\034\001\033\001\019\001\034\001\
\087\000\009\001\033\001\019\001\002\001\033\001\023\001\034\001\
\085\000\096\000\008\001\000\000\025\001\100\000\021\001\021\001\
\021\001\021\001\021\001\106\000\018\000\002\001\020\001\110\000\
\022\001\255\255\024\001\008\001\026\001\116\000\255\255\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\020\001\
\255\255\022\001\255\255\024\001\000\000\026\001\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\001\001\002\001\
\003\001\004\001\005\001\006\001\255\255\000\000\255\255\255\255\
\028\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\000\000\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\000\000\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\000\000\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\000\000\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\001\001\002\001\003\001\004\001\005\001\
\000\000\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\001\001\002\001\003\001\004\001\
\005\001\000\000\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\001\001\002\001\003\001\
\004\001\005\001\000\000\007\001\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\001\001\002\001\
\003\001\004\001\005\001\000\000\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\001\001\
\002\001\000\000\255\255\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\001\001\002\001\000\000\255\255\255\255\255\255\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\000\000\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\000\000\255\255\255\255\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\000\000\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\000\000\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\000\000\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\000\000\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\000\000\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\000\000\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\007\001\008\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\007\001\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\002\001\
\255\255\255\255\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\255\255\022\001\008\001\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\020\001\255\255\022\001\255\255\024\001\255\255\026\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  POW\000\
  SEQ\000\
  NOT\000\
  EQ\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  EQEQ\000\
  NEQ\000\
  AND\000\
  OR\000\
  DOT\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  IF\000\
  THEN\000\
  ELSE\000\
  STRUCT\000\
  ALIAS\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  VAR\000\
  VARCOLON\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                        ( AssignStruct(_1, _3, _5) )
# 497 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                                   ( AssignArray(_1, _3, _6) )
# 506 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                ( Assign(_1, _3) )
# 514 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                    ( VarDef(_1,_2,_4) )
# 523 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'fxn_args) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                                           ( FxnDef(_1,_2,_4,_7) )
# 533 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 50 "parser.mly"
           ( IntLit(_1) )
# 540 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 51 "parser.mly"
             ( FloatLit(_1) )
# 547 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
        ( Var(_1) )
# 554 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                ( StructField(_1,_3) )
# 562 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
             ( Uop(Not,_2) )
# 569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                        ( Uop(Neg,_2) )
# 576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                  ( Binop(_1,Add,_3) )
# 584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                  ( Binop(_1,Sub,_3) )
# 592 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                  ( Binop(_1,Mul,_3) )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                  ( Binop(_1,Div,_3) )
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                  ( Binop(_1,Mod,_3) )
# 616 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                  ( Binop(_1,Pow,_3) )
# 624 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                   ( Binop(_1,Eq,_3) )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                  ( Binop(_1,Neq,_3) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                 ( Binop(_1,Less,_3) )
# 648 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                 ( Binop(_1,Greater,_3) )
# 656 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                   ( Binop(_1,LessEq,_3) )
# 664 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                   ( Binop(_1,GreaterEq,_3) )
# 672 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                  ( Binop(_1,And,_3) )
# 680 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                 ( Binop(_1,Or,_3) )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                  ( Binop(_1,Seq,_3) )
# 696 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                       ( _2 )
# 703 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 72 "parser.mly"
                           ( NamedStruct(_1, _3) )
# 711 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 73 "parser.mly"
                       ( AnonStruct(_2) )
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 74 "parser.mly"
                       ( ArrayCon(_2) )
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'either_args) in
    Obj.repr(
# 77 "parser.mly"
                                  ( FxnApp(_1, _3) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                ( IfElse(_2,_4,_6) )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'named_args) in
    Obj.repr(
# 83 "parser.mly"
                                   ( NamedFxnArgs ((_1, _2) :: _4) )
# 751 "parser.ml"
               : 'either_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 84 "parser.mly"
         ( OrderedFxnArgs (_1) )
# 758 "parser.ml"
               : 'either_args))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                  ( [] )
# 764 "parser.ml"
               : 'fxn_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fxn_args_list) in
    Obj.repr(
# 88 "parser.mly"
                  (List.rev _1)
# 771 "parser.ml"
               : 'fxn_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
            ( [(_1,_2)] )
# 779 "parser.ml"
               : 'fxn_args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fxn_args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                ( (_3,_4) :: _1 )
# 788 "parser.ml"
               : 'fxn_args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                  ( [] )
# 794 "parser.ml"
               : 'named_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'named_args_list) in
    Obj.repr(
# 96 "parser.mly"
                    (List.rev _1)
# 801 "parser.ml"
               : 'named_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                  ( [(_1,_2)] )
# 809 "parser.ml"
               : 'named_args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'named_args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                        ( (_3,_4) :: _1 )
# 818 "parser.ml"
               : 'named_args_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                  ( [] )
# 824 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 104 "parser.mly"
              (List.rev _1)
# 831 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
         ( [_1] )
# 838 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                         ( _3 :: _1 )
# 846 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "parser.mly"
                     ( Alias(_2,_4) )
# 854 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'fxn_args_list) in
    Obj.repr(
# 112 "parser.mly"
                                              ( StructDef(_2,_5) )
# 862 "parser.ml"
               : 'typedef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedef) in
    Obj.repr(
# 115 "parser.mly"
            ( Typedef(_1) )
# 869 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
         ( Expression(_1) )
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 119 "parser.mly"
         ( [_1] )
# 883 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 120 "parser.mly"
               ( _2:: _1 )
# 891 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 123 "parser.mly"
              ( List.rev _1 )
# 898 "parser.ml"
               : Ast.program))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
