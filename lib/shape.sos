import point.sos

alias path = array point
alias shape = array point

copy_point : (p: point) -> point = copy(p)

copy_path : (p: path) -> path = copy_point (p)

appendhelp_copyin : (in: path, from: path, i: int) -> void = 
    if i<in.length then
    in[i]=from[i+1];
    appendhelp_copyin (in, from, i+1)
    else 0

appendhelp_tail : (p: path) -> path = 
    tail: path = p.length-1 of [{0.0, 0.0}];
    appendhelp_copyin(tail, p, 0); tail

// Appends two paths, merging them at their endpoints, if needed
append : (p1 : path, p2: path) -> path = 
    if p1.length == 0 then copy_path(p2)
    else if p2.length == 0 then copy_path(p1)
    else 
    merge: bool = p1[p1.length-1] == p2[0];
    p2c: path = (if merge then appendhelp_tail(p2) else p2);
    ret: path = p1 @ p2c;
    (if merge then free(p2c) else 0); ret

reversedhelp: (in: path, from: path, i: int) -> void = 
    if i < in.length then
    in[i].x = from[in.length-1-i].x;
    in[i].y = from[in.length-1-i].y;
    reversedhelp(in, from, i+1)
    else 0

// Creates a new array that is p reversed
reversed: (p : path) -> path =
    newpath : path = p.length of [{0.0, 0.0}];
    reversedhelp(newpath, p, 0);
    newpath

reversehelp : (p: path, i: int) -> void =
    if i < p.length/2 then
    q: point = p[i];
    p[i] = p[p.length-1-i];
    p[p.length-1-i] = q;
    reversehelp (p, i+1)
    else 0

// Reverses p in-place
reverse: (p: path) -> void = reversehelp(p, 0)
    
